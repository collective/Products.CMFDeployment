Index: transports/__init__.py
===================================================================
--- transports/__init__.py	(revision 1937)
+++ transports/__init__.py	(working copy)
@@ -45,6 +45,12 @@
     log.error("sitecopy not available")
     sitecopy = None
 
+try:
+    import ziptransport
+except ImportError:
+    log.error("ziptransport not available")
+    ziptransport = None
+
 #################################
 # simple global protocol registry    
 
Index: transports/ziptransport.py
===================================================================
--- transports/ziptransport.py	(revision 0)
+++ transports/ziptransport.py	(revision 0)
@@ -0,0 +1,123 @@
+from Products.CMFDeployment.DeploymentInterfaces import IDeploymentProtocol, IDeploymentTarget
+from Products.CMFDeployment.lib import pexpect
+from Products.CMFDeployment.DeploymentExceptions import ProtocolError
+from Products.CMFDeployment.Namespace import *
+from Products.CMFDeployment.utils import SerializablePlugin
+from os import path, walk
+from cStringIO import StringIO
+from tarfile import open as opentar
+from datetime import datetime
+
+class ZipProtocol(object):
+    """The ZipProtocol object actually does the work of compressing all the cooked pages to a compressed file.  
+    Any work done on the compression level should happen here.
+    """
+    __implements__ = IDeploymentProtocol
+
+    def execute(self, target, structure):
+        """
+        """
+        local_directory = structure.getMountPoint()
+        target_directory = target.getLocation()
+        
+        ds = datetime.now()
+        zf = opentar(path.join(target_directory,"Export_%s-%s-%s_%s_%s_%s.tar.gz" % (ds.month, ds.day, ds.year, ds.hour, ds.minute, ds.second)), "w:gz")
+        zf.posix = False         # set the file to allow names longer than 100 characters
+        zf.add(local_directory, recursive=True)
+        zf.close()
+        
+
+addZipTransportForm = DTMLFile('../ui/ZipTransportAddForm', globals())
+
+def addZipTransport( self,
+                          id,
+                          location='',
+                          RESPONSE=None):
+    """ add zip transport """
+    
+    transport = ZipTransport( id )
+    transport.edit( location )
+    self._setObject( id, transport )
+    
+    if RESPONSE is not None:
+        RESPONSE.redirect('manage_main')
+
+class ZipTransport( SerializablePlugin ):
+    """The Zip transport contains configuration information,
+    security permissions, and providing information required
+    for serializing the configuration to the CMFDeployment
+    xml config export.
+    """
+
+    __implements__ = IDeploymentTarget
+
+    meta_type = 'Zip Target'
+
+    security = ClassSecurityInfo()
+
+    _tprotocol = ZipProtocol()
+    xml_factory = "addZipTransport"
+
+    manage_options = (
+
+        {'label':'Settings',
+         'action':'target_settings'},
+
+        ) + App.Undo.UndoSupport.manage_options
+
+    target_settings = DTMLFile('../ui/ZipTransportSettingsForm', globals())
+
+    def __init__(self, id):
+        self.id = id
+        self._location = None
+
+
+    security.declareProtected(CMFCorePermissions.ManagePortal, 'edit')
+    def edit(self,
+             location,
+             RESPONSE=None):
+        """ edit transport """
+
+        self.checkLocation( location )
+
+        self._location = location
+
+        if RESPONSE is not None:
+            RESPONSE.redirect('manage_workspace')
+
+    def checkLocation( self, location ):
+        """Validation stub.
+        """
+        pass
+
+    security.declareProtected(CMFCorePermissions.ManagePortal, 'getLocation')
+    def getLocation(self):
+        """The only current relevant config option.  Directory 
+        where compressed file is output.
+        """
+        return self._location
+
+    security.declareProtected(CMFCorePermissions.ManagePortal, 'transfer')
+    def transfer(self, structure ):
+        """Triggers execution of compression.
+        """
+        protocol = self.getProtocol()
+        protocol.execute( self, structure)
+
+    security.declareProtected(CMFCorePermissions.ManagePortal, 'getProtocol')
+    def getProtocol(self):
+        return self._tprotocol
+
+    security.declarePrivate('getInfoForXml')
+    def getInfoForXml( self ):
+        """Get serialization info for output config file.
+        """
+        d = SerializablePlugin.getInfoForXml( self )
+        del d['attributes']['title']
+        d.update( {
+            'location':self._location
+                  } )
+        return d
+
+
+InitializeClass( ZipTransport )
\ No newline at end of file

Property changes on: transports/ziptransport.py
___________________________________________________________________
Name: svn:eol-style
   + native

Index: __init__.py
===================================================================
--- __init__.py	(revision 1937)
+++ __init__.py	(working copy)
@@ -99,6 +99,16 @@
                              sitecopy.addSiteCopyTransport ),
             visibility = None        
             )
+    
+    if transports.ziptransport is not None:
+        ziptransport = transports.ziptransport
+        context.registerClass(
+            ziptransport.ZipTransport,
+            permission = 'CMFDeploy: Add Deployment Transport',
+            constructors = (ziptransport.addZipTransportForm,
+                            ziptransport.addZipTransport),
+            visibility = None
+        )
 
     crule = rules.default
     context.registerClass(
Index: ui/ZipTransportSettingsForm.dtml
===================================================================
--- ui/ZipTransportSettingsForm.dtml	(revision 0)
+++ ui/ZipTransportSettingsForm.dtml	(revision 0)
@@ -0,0 +1,19 @@
+<dtml-var manage_page_header>
+<dtml-var manage_tabs>
+
+<h2> Edit Zip Target </h2>
+
+<form action="edit" method="POST">
+<table>
+
+<tr><td>Location</td>
+    <td><input type="text" name="location" value="<dtml-var getLocation>"></td></tr>
+
+<tr><td colspan="2">
+    <input type="submit" value="Edit Deployment Target"> </td></tr>
+
+</table>
+
+</form>
+
+<dtml-var manage_page_footer>

Property changes on: ui/ZipTransportSettingsForm.dtml
___________________________________________________________________
Name: svn:eol-style
   + native

Index: ui/ZipTransportAddForm.dtml
===================================================================
--- ui/ZipTransportAddForm.dtml	(revision 0)
+++ ui/ZipTransportAddForm.dtml	(revision 0)
@@ -0,0 +1,22 @@
+<dtml-var manage_page_header>
+
+<h2> Add Zip Transport </h2>
+
+
+<form action="addZipTransport" method="POST">
+<table>
+
+<tr><td>id</td>
+    <td><input type="text" name="id"></td></tr>
+
+<tr><td>Target Directory</td>
+    <td><input type="text" name="location"></td></tr>
+
+<tr><td colspan="2">
+    <input type="submit" value="Add Zip Transport"> </td></tr>
+
+</table>
+
+</form>
+
+<dtml-var manage_page_footer>

Property changes on: ui/ZipTransportAddForm.dtml
___________________________________________________________________
Name: svn:eol-style
   + native

